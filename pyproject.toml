[project]
dynamic = ["version", "urls"]

name = "ingenialink"
description = "IngeniaLink Communications Library"
authors = [
  { name = "Novanta", email = "support@ingeniamc.com" }
]
readme = { file = "README.rst", content-type = "text/x-rst" }

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Cython",
  "Topic :: Communications",
  "Topic :: Software Development :: Libraries"
]

requires-python = ">=3.9"
dependencies = [
    "canopen==2.2.0",
    "python-can==4.4.2",
    "ingenialogger>=0.2.1",
    "ping3==4.0.3",
    "pysoem>=1.1.11, <1.2.0",
    "numpy>=1.26.0",
    "scipy==1.12.0",
    "bitarray==2.9.2",
    "multiping==1.1.2",
]

[tool.poetry]
version = "7.4.3"  # base version

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "ingenia"
url = "http://pypi.ingenia/simple"
priority = "supplemental"


[build-system]
requires = ["setuptools==75.6.0", "setuptools_scm[toml]>=8", "wheel==0.42.0", "Cython==3.0.11"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
version_scheme = "only-version"
local_scheme = "node-and-date"
write_to = "ingenialink/_version.py"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["ingenialink", "virtual_drive"]

[tool.setuptools.package-data]
ingenialink = ["py.typed", "*.pyd"]
virtual_drive = ["py.typed", "resources/*"]

# Dependencies to run poe tasks
[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
poethepoet = {extras = ["poetry-plugin"], version = "^0.35.0"}

# Dependencies for build wheel tasks
[tool.poetry.group.build]
optional = true
[tool.poetry.group.build.dependencies]
twine = "==6.1.0"

# Dependencies for format task
[tool.poetry.group.format]
optional = true
[tool.poetry.group.format.dependencies]
ruff = "==0.9.2"

# Dependencies for type task
[tool.poetry.group.type]
optional = true
[tool.poetry.group.type.dependencies]
mypy = "==1.10.0"

# Dependencies for docs task
[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
sphinx = "==7.3.7"
sphinx-rtd-theme = "==2.0.0"
sphinxcontrib-bibtex = "==2.6.2"
nbsphinx = "==0.9.4"
m2r2 = "==0.3.4"
jinja2 = "==3.1.4"

# Dependencies for tests task
[tool.poetry.group.tests]
optional = true
[tool.poetry.group.tests.dependencies]
pytest = "==8.4.1"
pytest-env = "==1.1.5"
pytest-cov = "==2.12.1"
pytest-mock = "==3.6.1"
pytest-console-scripts = "==1.4.1"
twisted = "==24.11.0"
summit-testing-framework = "==0.1.4+pr30b62"

# -----------------------------------------------------------------------
#                                   TASKS
# -----------------------------------------------------------------------

# ----------------------------- Build wheel -----------------------------
[tool.poe.tasks.build-wheel]
help = "Build wheels"
cmd = "poetry build"

[tool.poe.tasks.check-wheels]
help = "Check wheels"
cmd = "twine check dist/*"

# ----------------------------- Ruff format -----------------------------
[tool.poe.tasks.ruff-format-check]
help = "Format check with ruff"
cmd = "ruff format --check ingenialink tests virtual_drive"

[tool.poe.tasks.ruff-check]
help = "Check with ruff"
cmd = "ruff check ingenialink tests virtual_drive"

[tool.poe.tasks.format]
help     = "Check format"
sequence = ["ruff-format-check", "ruff-check"]

# ----------------------------- Ruff reformat -----------------------------
[tool.poe.tasks.ruff-format]
help = "Format files with ruff"
cmd = "ruff format ingenialink tests virtual_drive"

[tool.poe.tasks.ruff-check-fix]
help = "Fix lint errors"
cmd = "ruff check --fix ingenialink tests virtual_drive"

[tool.poe.tasks.reformat]
help     = "Reformat files and fix lint errors"
sequence = ["ruff-format", "ruff-check-fix"]

# ----------------------------- Mypy -----------------------------
[tool.poe.tasks.type]
help = "Run type checks"
cmd = "mypy ingenialink virtual_drive examples"

# ----------------------------- Documentation -----------------------------
[tool.poe.tasks.docs]
help = "Build documentation"
cmd = "python -I -m sphinx -b html docs _docs"

# ----------------------------- Install wheel -----------------------------
[tool.poe.tasks.install-wheel]
cmd = "pip install --force-reinstall --no-deps --no-index --find-links dist/ ingenialink"

# ----------------------------- Run unit tests -----------------------------
[tool.poe.tasks.tests]
cmd = "python -I -m pytest tests"

# ----------------------------- Coverage combine -----------------------------
[tool.poe.tasks.cov-combine]
cmd = "python -I -m coverage combine"

# ----------------------------- Coverage report -----------------------------
[tool.poe.tasks.cov-report]
cmd = "python -I -m coverage xml"